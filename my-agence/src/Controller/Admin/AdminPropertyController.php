<?php

namespace App\Controller\Admin;

use App\Entity\Pictures;
use App\Entity\Property;
use App\Form\PropertyType;
use App\Form\PicturesPropertyType;
use App\Repository\PropertyRepository;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;


class AdminPropertyController extends AbstractController
{
    public function __construct(PropertyRepository $repository,ObjectManager $manager)
    {
        $this->repository = $repository;
        $this->manager = $manager;
    }

    /**
     * @Route("/admin", name="admin.property.index")
     */
    public function index()
    {
        $properties = $this->repository->findAll();

        return $this->render('admin/property/index.html.twig', compact('properties'));
    }



    /**
     * @Route("/admin/property/create", name="admin.property.new")
     */
    public function new(Request $request){
        $property = new Property();
        

        $form = $this->createForm(PropertyType::class, $property);
        
        
    

        $form->handleRequest($request);
        

        if($form->isSubmitted() && $form->isValid()){

           
           
            $this->manager->persist($property);
            $this->manager->flush();
            $this->addFlash('success','Bien crée avec succès');
            return $this->redirectToRoute('admin.property.index');
        }

        return $this->render('admin/property/new.html.twig', [
            'property' => $property,
            'form' => $form->createView()
            
        ] );

    }



    /**
     * @Route("/admin/property/{id}", name="admin.property.edit", methods="GET|POST")
     */
    public function edit(Property $property,Request $request )
    {
        
        $property->setPicture(
                new File($this->getParameter('pictures_directory').'/'.$property->getPicture())
            );

        $form = $this->createForm(PropertyType::class, $property);
        
        $form->handleRequest($request);
        
        if($form->isSubmitted() && $form->isValid()){
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $property->getPicture();

            $fileName = $property->getId().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('pictures_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $property->setPicture($fileName);
           
            // ... persist the $property variable or any other work

            $this->manager->flush();
            $this->addFlash('success','Bien modifié avec succès');

            return $this->redirectToRoute('admin.property.index');
        }
        
        
        return $this->render('admin/property/edit.html.twig', [
            'property' => $property,
            'form' => $form->createView()
        ] );
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/admin/property/{id}", name="admin.property.delete", methods="DELETE")
     * 
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function delete(Property $property, Request $request)
    {
        if($this->isCsrfTokenValid('delete' . $property->getId(), $request->get('_token'))){
            
             $this->manager->remove($property);
            $this->manager->flush();
            $this->addFlash('success','Bien supprimé avec succès');
        }
        
       
        
        return $this->redirectToRoute('admin.property.index');
    }
}